
BUG: Don't go into next selection when deleting an item in single column mode


-------------------------------------

goal:
    avoid storing objects that aren't referenced
    
    storeDirtyObjects method
        enumerates dirtyObjects
        
        loop dirty objects, allow new ones to be added as pids are referenced 
        but keep storedPids list and check before each store - error if double write of same obj detected
        
        BMStorableNode.pid() 
            if missing pid, creates and marksDirty
    
    separate _isDirty from store list, 
        only schedule for store if:
            !_existsInStore & root or 
            _existsInStore & stored slot changed

    need a _existsInStored
        - set true on load
        - set true on write
        
    existsInStore infered from pid?
    avoid pid assignment until save
    don't use pid in dirty list


---------------------------------


- remove all roots except Network?
    keep servers and stun servers?

- move KeyPair off of Identities in preparation for using BMSessionKeys


-- new Synchronizer
            object needing sync marks it locally:
                this._needsSyncToStore = true
                this._needsSyncToView = true
                this._needsSyncFromView = true
                this._needsSyncToNode = true
                this._needsSyncFromNode = true
                
                    BMNode.scheduleSyncToView: function() {
                        this._needsSyncToView = true
                        Synchronizer.shared().addObject(this)
                    }
                    
                    BMNode.sync: function() {
                        this._isSyncing = true
                        
                        if (this._needsSyncToView) { 
                            if (this._isSyncingToView) {
                                throw new Error("sync to view loop detected")
                            }
                            this._isSyncingToView = true
                            try {
                                this.syncToView(); 
                            } catch(e) {
                            
                            }
                            this._needsSyncToView = false 
                            if (e) { throw e }
                        }
                        ...
                    }
                    
                    BMNode.syncAscpect: function(aspect) {
                        var active = "_isDoing" + aspect
                        var needs = "_need" + aspect
                        var do = "do" + aspect
                        
                        if (this[active]) {
                            throw new Error(aspect + " loop detected")
                        }
                        this[active] = true
                        
                        try {
                            this[do].apply(this); 
                        } catch(e) {
                        
                        }
                        
                        this[needs] + aspect = false 
                        if (e) { 
                            throw e 
                        }
                        ...
                    }
                
            addObject(obj)
        on sync sends:
        


    store <- node -> view
    
    node scheduleSyncToStore    store <- node
    node scheduleSyncToView     node -> view (just requests that view sync from it)
    view scheduleSyncFromNode   node -> view
    view scheduleSyncToNode     node <- view
    
    - model to store (any storable set slot outside of loading)
    - model to view (any viewable set slot)
    - view to model (any modelled set slot during user input? timers?)

- unify equals() with isEqual()

--------

Deleting msg?



ChatMsg
    -> ObjMsgRecord 
        -> ObjMsg
   
DB LOST IDS:     
    - can produce by throwing exception in PrivateMessage setObjMsg (which is raised when loading first time)
    - can produce sometimes with error on imports 

    
- ImageWellView
    - insert dropped image between images at drop point instead of appending to end
    
TODO: add way to access style sheet attribute of a given css class e.g. BrowserFooter height

- put column header actions in separate view so they can be synced separately 

- ChatThread - only select from valid remoteIdentities? Color/Mark invalid RemoteIdentities

on setting a stored slot, check subnodes and replace old slot value with new one if found

- eliminate BMNavNode? still need title matching?

- make sure direct setting of _slot = value also call slotUpdate
- check for not calling setParentNode on subnode that already has a parent???

GENERAL 
    - add navigator.onLine check?
    https://blog.superhuman.com/building-reliable-apps-on-unreliable-networks-3f75743fc457


FIELDS
    - select field on edit
    - edit on hitting return on selected/focused field 
    
MESSAGING:
	- cleanup message dict format
		- add time/date field
	
	EMAIL:
	    - way to show pubkey when no contact available?
	    - fix from address on emails 
	
		- move sent to separate instance made on send, not when seen in msg queue

	CHAT:
	    - chat threads

	CONTACTS:
    	- move contacts under identity



++ replace updateViews with a better name?
	++ it means "syncInternalToVisibleStateOfView"?

    
- fix: WARNING: not using empty peerjs connection config

BROWSER:
	COLORS: 
		- support for browser header bar colors
		- move color themes to json file
		- make themes a preference?
		
    TITLE:
        - if single column mode, use a single default column bgColor
        - add a nodeColumnTitle method which defaults to title for single column mode
    PATH:
        - fix hash path to remove first component (the app name)

    ROWS:
        - double tap to edit row titles? or hold tap?

        - row delete button not stopping event propagation to select row?
        - use double tap to edit editable text field row title?
        - don't adjust visible column set if a new row selection doesn't require more room 
    		- (let user use back arrow if they want that)
        - have BrowserView observe node titles to update window hash path?

        - FEATURE: support for reording rows (nodeRowsUserOrderable) like Clear
        - FEATURE: support for white rows with shadow selection (use z-index?)

        - nodeMaxWidth?

	BROWSER fitColumns cleanup?
	    activeEndColumnsThatFitBrowserWidth
	    inactiveEndColumns
	    setInactiveEndColumnCount()
	    startColumnsToCollapse

DATASTORE:
    - cleanup: avoid writing over (or at least ever storing) existing object instances on read from store?
        - looks like they get stored the first pass and the ones from last time are deleted on next sweep

PANEL:
    - add verify delete panel

FIELDS:
    - add right arrow on note of link field 
    - make tab go to next field?
    FIELD ACTION BUTTONS:
        - move actions to fields with attributes like "isEnabled" and enabledMethod


IMAGES:
    - image resizing (adjust jpg compression until <= size target)

CLEANUP:
    -- use View postfix consistently


NICE:
    - add ID by left arrow?
    - support a ID specific theme? colors? fonts?

--- DOC NOTES ---------

SYNCING

DB -> MODEL -> VIEW (db loads on start or model access, view loads on access)
DB <- MODEL -> VIEW (model code auto detects changes and calls sync to view and DB)
DB    MODEL <- VIEW (event code explicitly calls sync)

--- FEEDS ---

BMTweet - BMObjectMessage
BMTweetRowView (non fixed height)
peer id: pubkey-bloomFilterOfSubscriptions-syncEstimate




