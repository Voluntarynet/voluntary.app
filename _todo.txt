
- move BooleanView from onClick to onTap

- fix BooleanFieldRowView

- test out inspectors on other elements - fields like "shows title"

- make CloseButton a subclass of ButtonView

- drag between column support?


- cleanup uses of onTapComplete? support onOneFingerTap, onOneFingerDoubleTap, etc?

- need event propogation for gestures - separate onTap from onAlternateTap?
- animate row height change

fix bug with padding after slide on button row


ImageWellFieldRowView
    key
    vale -> ImageWellView 
                subviews -> ImageView 
                            subviews -> ImageViewImageContainer

column/row features:

- use tab to go to next row

multiple selection?
select all (command-a?, control-a?)
copy and paste selected rows?

styles:

    rowItems:
      title
      subtitle
      field key
      field value 
      
        states:
          unselected 
          selected
          disabled

             attributes:
               font
               size
               color
               background-color
               opacity
               border-left, etc
               border-radius
               padding?
               margins?
      

--------------

need a way to set icon forground colors

turn off arrow key handling by column while editing text field

issue with tap - what if a parent and child view both get a tap?
- how do we implement an event propogation system like click uses?
- option: have request activation check to see if the currently activated view is under the requesting on,
  if so, override it?

BrowserRow title - TextField option for double tap to edit?


--------------

Docs.class("name").setDescription = ""

FunctionProto.addDoc("methodName", "")


MIRROR
Do we need inheritance?

View

- nodeMirror() { 
    const node = this._node
    if (node && node.nodeMirror) {
        return node.nodeMirror()
    }
    return node
}
    

nodeMirror()

- select BMFieldViewRow when clicking on it

- make BrowserRow note view vertically centered

nodeRowLink -> nodeRowLinkMethods?
defaultNodeRowLinkMethod?
notification didUpdateDodeRowLinkMethods

OPTION 0
Keep columns unaware that a node was skipped?


OPTION 1
Let the node manage what the column sees?
Row (for NodeA) -> select -> Column (for NodeA)
Row (for NodeA) -> select -> Column (for NodeA.visibleNode())

OPTION 2
Let the column manage what the column sees?
Row (for NodeA) -> select -> Column (for NodeA)
Row (for NodeA) -> select -> Column (for NodeA.visibleNodesOrder()[index])

OPTION 3
Use compacted column to jump?
Node 
- columnCompactsByDefault()
- compactedColumnDefaultSelectedSubnode()

NodeA.defaultColumnNode() (this or some subnode?)

1. advantages - keeps logic on view side
                expand animatations 
                have special button or gesture on row to "uncompact" subnodes
                keeps paths consistent
                
2. disadvantages - need to make Columns navigation aware when it should skip the compacted columns

Will most nodes be "compacted"?
Can we skip creating that view entirely? If so, just special case paths?


Node
    attributeSlots
    subnodes
    
Node
    subnodes attributes
             someList
             anotherList
    
node
    subnodes
    inspectorNode FieldSetNode
    node can return 



Node -> NodeView

A Field is a Node that represents a Slot.
A Slot has key, value, and other properties (canEdit, valid values, validator, etc)

Field 
    key / isVisible / isEditable / error
    value / isVisible / isEditable / error
    isValid
    target
    valueSetter
    valueGetter

A Field is a Row that is a container for a 


Move from .node() to nodeMirror() ?


NODES -> RowViews

Action 
Boolean
Date
Image
Menu (title, subtitle)
Number (range, format, useSlider?) 
Options 
Pointer
TextField
TextArea
Color

-----------

**Fields**
- make statefull and have them sync with parent nodes if they have targetGetter/setters (Done?)
BMOptionRow - sends this.parentNode().selectOption(this) when clicked

- a row duplicate feature? (command D? command copy/paste? three finger long press?)

- mode for non white background on fields - persist styles?

- add a default user image, so formatting of messages isn't weird 

- use onShiftClick and two finger long press to inspect a node?

---------------

use control-edge drag or double finger drag to apply to prototype?
store width hint on parent node's field?

abstract edge drag to resize?

gesture to add subtitle?


should we abstract style so we can:
- unify style and computed style
- simplify storing and copying style
- separate style specific helpers (e.g. PX stuff) from DomView 

need generic way to open an inspector for currently focused item?
e.g. inspect TextField currently editing to change font size
- multi-finger long tap on touch? function-click with mouse?

protocol to check editability of and store adjusted row size, font size, etc?
option +, option - to adjust font size of text field being edited
change font color, bg color, column color settings
column orientation

copy/paste style
store/edit style at row prototype level

dynamically add field rows?
- option-long-click / double-long-press to inspect element to choose field type?

    Node
        - fields
        - subnodes (short cuts to an array field
        
    A field is a type of node used to represent a property of a node.
    
    Field types:
        Creator     BMCreatorField
        Button      BMActionNode
        Boolean     BMBooleanField  
        Date        BMDateField
        Text 
        TextArea    BMTextAreaField
        Identity    BMIdentityField
        Number      BMNumberField
        Time
        Options (can point to node containing list of options, or it's own local set?)
        Pointer
        Array
        Method?
        
        
prevent onClick when finishing row reording

fix row background /transparent issues

Transitions abstraction work


Column darkenUnselectedMode?

--------------------------------------------------

- copy/paste identity private key

-- test gestures on surface pro
  -- make diagraming app
  -- test rotation / orientation

-- support for adding/removing field set items, storing result
-- top shelf

-- double tap to edit BrowserTitledRow title?
	- method to add double tap gesture on TextArea/Textfield?

-- ability to switch themes
-- dark theme for BMFieldRow when not in FieldSet?

-- Dragging from anywhere in window
	- standard long press with 2-3 fingers to drag?
	- ask if target allows drag
	- determine type of drag (move/copy) using modifier keys and or finger count?
	- determine how to display drag view - some common standard of icon + label?
	- create drag view and add to DocumentBody(?)
	- add PanGesture to drag view, start panBegin
	- onPanMove calcs new location using PanGesture downPositionInTarget (add helper method for calc?)
	
	Drop areas
	- default to highlight drop area if allowed but can override 

	ColumnBrowser onDrop
	- check if allows drop and specific drop type
	- create empty browser row 
	- pause syncing from model

- support multi BrowserRow selection

-------------------------

select all text on double touch tap

copy / paste /duplicate rows?

------------------------

BrowserColumn -> *Row
Node          -> subitems 
         node.subitems -> BMField

Network Node.subitems = [BMBooleanField



BrowserColumn? / BrowserInspector? / BrowserColumn?

BrowserInspector subclass of BrowserColumn that rev



----------------

NEW VIEWS

    Grid View?
        Top Shelf
        TableView Browser Column
        Horizontal Browser Column

    Hierarchical Column view


    Grid Browser Column

-------------------------------------

-- support for adding/removing field set items, storing result

-- double tap to edit BrowserTitledRow title?
	- method to add double tap gesture on TextArea/Textfield?

-- dark theme for BMFieldRow when not in FieldSet?

-- Dragging from anywhere in window
	- standard long press with 2-3 fingers to drag?
	- ask if target allows drag
	- determine type of drag (move/copy) using modifier keys and or finger count?
	- determine how to display drag view - some common standard of icon + label?
	- create drag view and add to DocumentBody(?)
	- add PanGesture to drag view, start panBegin
	- onPanMove calcs new location using PanGesture downPositionInTarget (add helper method for calc?)
	
	Drop areas
	- default to highlight drop area if allowed but can override 

	ColumnBrowser onDrop
	- check if allows drop and specific drop type
	- create empty browser row 
	- pause syncing from model

    - support multi BrowserRow selection 
        - UI interaction?
            - mouse: hold command or shift and click
            - touch: hold one item and tap on or slide across others?

    -- ability to switch dark/light theme

-----------------------------------------------------------------------------------

    Browser features:  
        - copy/paste on rows?
        - double tap to inline edit row text?
        - pinch apart to add row?
        - tap on column to add row?
        - stretch to add row?

    How to expand/compact Node to edit properties?
      - icons at top? gesture? 
         - hold click on top? 
         - hold click on column divider?
         - horizontal pinch apart columns - pinch together to compact?  
         - how to visually display option to edit?

    TopShelf vs LeftShelf? TopDragShelf?
    - compact/expand top shelf?

    Small fixes:
    - figure out when to use white/dark theme on rows consistently
    - use dark for non property navigation?

    Editing a Node:
    - when adding row, insert a special place-holder row and navigate into it
      next column shows options for which type of row to add, navigate to choice
      further options and "ok" displayed to complete action?
    - how to edit an existing row? special click to navigate to it's options?

    - some way to collapse/expand Node to show all properties or treat some default as it's subnodes? 

    Questions:
    - How to distinguish meta edit operations? 
    - When is it normal or meta?

--------------------

Simple -> Start the app and commicate (on all devices)
Minimum features -> Feed, Chat, Groups, Events, Friends
Fast -> No one will use a slow App
Ownership -> All self-owned data can be removed from everywhere
Decentralized -> And no one else can remove your data
Privacy -> With simple sharing control

